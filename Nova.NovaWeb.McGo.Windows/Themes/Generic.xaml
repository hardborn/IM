<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:Nova.NovaWeb.McGo.Windows"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:Actions="clr-namespace:Nova.NovaWeb.McGo.Windows.Actions"
    xmlns:Behaviours="clr-namespace:Nova.NovaWeb.McGo.Windows.Behaviours">
    
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    
    <Style x:Key="StateButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="LayoutRoot" Margin="0" Background="#01FFFFFF">                      
                        <ContentPresenter x:Name="Content" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalAlignment="{Binding HorizontalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Foreground" Value="{Binding OriginalColor, RelativeSource={RelativeSource TemplatedParent}}" />
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter Property="Foreground" Value="#FF404040" />
                        </Trigger>

                        <Trigger Property="IsKeyboardFocused" Value="True"/>
                        <Trigger Property="ToggleButton.IsChecked" Value="True"/>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="#FFADADAD"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <LinearGradientBrush x:Key="MainWindowBackgroundBrush"
                       EndPoint="0.5,0.5"
                       StartPoint="0.5,0"
                       SpreadMethod="Reflect">
        <GradientStop Color="#FFA3D7FF" />
        <GradientStop Color="#FFF2F9FF" Offset="1" />
    </LinearGradientBrush>



    <!--MetroCircleButtonStyle-->
    <LinearGradientBrush x:Key="ButtonNormalBackground" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#F3F3F3" Offset="0"/>
        <GradientStop Color="#EBEBEB" Offset="0.5"/>
        <GradientStop Color="#DDDDDD" Offset="0.5"/>
        <GradientStop Color="#CDCDCD" Offset="1"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="ButtonNormalBorder" Color="#FF707070"/>    
    <Style x:Key="MetroCircleButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource ButtonNormalBackground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource ButtonNormalBorder}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Background="#02FFFFFF">
                        <Ellipse x:Name="ellipsebg"
                                 Margin="4"
                                 Stroke="{TemplateBinding Foreground}"
                                 StrokeThickness="0"
                                 VerticalAlignment="Stretch" />
                        <Ellipse x:Name="ellipse"
                                 Margin="4"
                                 Stroke="{TemplateBinding Foreground}"
                                 StrokeThickness="2"
                                 VerticalAlignment="Stretch" />
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          RecognizesAccessKey="True"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ellipsebg" Property="Fill" Value="{DynamicResource BlackBrush}" />
                            <Setter TargetName="ellipsebg" Property="Opacity" Value="0.2" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ellipse" Property="Opacity" Value="1" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="ellipse" Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true" />
                        <Trigger Property="ToggleButton.IsChecked" Value="true" />
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Flyout-->
    <DataTemplate x:Key="HeaderTemplate">
        <StackPanel Orientation="Horizontal" Margin="10" >
            <Button x:Name="nav" Foreground="White" Style="{DynamicResource MetroCircleButtonStyle}" Height="40" Width="40" FontFamily="Segoe UI Symbol" FontSize="16" VerticalAlignment="Top" >
                <Button.Resources>
                    <SolidColorBrush x:Key="BlackBrush" Color="White" />
                </Button.Resources>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="Click">
                        <Actions:SetFlyoutOpenAction TargetObject="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:Flyout}}}" Value="False" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <Rectangle Width="20" Height="15">
                    <Rectangle.Fill>
                        <VisualBrush Stretch="Fill">
                            <VisualBrush.Visual>
                                <Canvas Clip="F1M0,0L48,0 48,48 0,48 0,0" Height="40" Width="48" >
                                    <Path Data="F1M36,22L36,26 19.75,26 27,33 20.5,33 11,24 20.5,15 27,15 19.75,22 36,22z" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Height="18" Canvas.Left="11" Stretch="Fill" Canvas.Top="15" Width="25" />
                                </Canvas>
                            </VisualBrush.Visual>
                        </VisualBrush>
                    </Rectangle.Fill>
                </Rectangle>
            </Button>
            <TextBlock Text="{Binding}" x:Name="PART_BackButton" FontSize="20" Margin="15,0,0,0" VerticalAlignment="Center"/>
        </StackPanel>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Position, RelativeSource={RelativeSource AncestorType={x:Type local:Flyout}}}" Value="Right">
                <Setter TargetName="nav" Property="Content">
                    <Setter.Value>
                        <Rectangle Width="20" Height="15" RenderTransformOrigin="0.5,0.5">
                            <Rectangle.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform/>
                                    <SkewTransform/>
                                    <RotateTransform Angle="-180"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Rectangle.RenderTransform>
                            <Rectangle.Fill>
                                <VisualBrush Stretch="Fill">
                                    <VisualBrush.Visual>
                                        <Canvas Clip="F1M0,0L48,0 48,48 0,48 0,0" Height="40" Width="48" >
                                            <Path Data="F1M36,22L36,26 19.75,26 27,33 20.5,33 11,24 20.5,15 27,15 19.75,22 36,22z" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" Height="18" Canvas.Left="11" Stretch="Fill" Canvas.Top="15" Width="25" />
                                        </Canvas>
                                    </VisualBrush.Visual>
                                </VisualBrush>
                            </Rectangle.Fill>
                        </Rectangle>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>
    <Style TargetType="{x:Type local:Flyout}">
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="HeaderTemplate" Value="{StaticResource HeaderTemplate}" />
        <Setter Property="Background" Value="#FF252525" />
        <Setter Property="Foreground" Value="#FFFFFFFF" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Flyout}">
                    <Grid x:Name="root" Background="{TemplateBinding Background}" HorizontalAlignment="Left">
                        <Grid.RenderTransform>
                            <TranslateTransform />
                        </Grid.RenderTransform>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup>
                                <VisualState x:Name="Default"/>
                                <VisualState x:Name="Hide">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="root">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.250" Value="1" x:Name="hideFrame">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Show">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="root">
                                            <EasingDoubleKeyFrame KeyTime="00:00:00.300" Value="1" x:Name="showFrame" >
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <StackPanel>
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header" ContentTemplate="{TemplateBinding HeaderTemplate}" />
                            <ContentPresenter x:Name="PART_Content"/>
                        </StackPanel>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--MetroContentControl-->
    <Style TargetType="{x:Type local:MetroContentControl}">
        <Setter Property="Foreground" Value="#FF000000" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:MetroContentControl">
                    <Grid x:Name="root" RenderTransformOrigin="0.5,0.5">
                        <Grid.RenderTransform>
                            <TranslateTransform />
                        </Grid.RenderTransform>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="LayoutStates">
                                <VisualState x:Name="AfterLoaded">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="root">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="root">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="30" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="AfterLoadedReverse">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="root">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="root">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="-30" />
                                            <EasingDoubleKeyFrame KeyTime="00:00:00" Value="0">
                                                <EasingDoubleKeyFrame.EasingFunction>
                                                    <CubicEase EasingMode="EaseOut" />
                                                </EasingDoubleKeyFrame.EasingFunction>
                                            </EasingDoubleKeyFrame>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="AfterUnLoaded">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="root">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="root">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="30" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="AfterUnLoadedReverse">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="root">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="1" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="0" />
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames BeginTime="00:00:00" Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="root">
                                            <SplineDoubleKeyFrame KeyTime="00:00:00" Value="0" />
                                            <SplineDoubleKeyFrame KeyTime="00:00:00.100" Value="-30" />
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="BeforeLoaded" />
                                <VisualState x:Name="BeforeUnloaded" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <ContentPresenter Cursor="{TemplateBinding Cursor}"
                                          ContentTemplate="{TemplateBinding ContentTemplate}"
                                          Content="{TemplateBinding Content}"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--NebulaWindow-->
    <LinearGradientBrush x:Key="titlebgcolor" EndPoint="0.5,1" StartPoint="0.5,0">
        <GradientStop Color="#FFE4ECF5" Offset="0.2"/>
        <GradientStop Color="#FFC5D6EA" Offset="1"/>
    </LinearGradientBrush>
    
    <SolidColorBrush x:Key="titlebgborderdowncolor" Color="#FFB9C4D4"/>
    <SolidColorBrush x:Key="winbordercolor" Color="#FF7F8690"/>
    <SolidColorBrush x:Key="winbgcolor" Color="#FFD7E4F2"/>
    
    <ControlTemplate x:Key="WindowTemplateKey" TargetType="{x:Type local:NebulaWindow}">
        <Grid Background="{TemplateBinding Background}">
            <Border x:Name="PART_Border"  BorderThickness="{TemplateBinding BorderThickness}"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    CornerRadius="3" BorderBrush="{DynamicResource winbordercolor}" Background="{DynamicResource winbgcolor}">
                <Border BorderThickness="1" CornerRadius="2" BorderBrush="White"/>
            </Border>
            <AdornerDecorator>
                <local:MetroContentControl IsTabStop="False" FocusVisualStyle="{x:Null}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                                      
                        <Grid x:Name="PART_TitleBar"
                                  Height="{Binding TitlebarHeight, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NebulaWindow}}}"
                                  Visibility="{TemplateBinding ShowTitleBar, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <!--<Grid.Background>
                                <SolidColorBrush Color="{DynamicResource AccentColor}"/>
                            </Grid.Background>-->
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid x:Name="headborder" Margin="2,2,2,0" Grid.ColumnSpan="2">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="6"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border BorderBrush="{StaticResource titlebgborderdowncolor}" BorderThickness="0,0,0,1" CornerRadius="1,1,0,0" Background="{StaticResource titlebgcolor}" Grid.RowSpan="2">
                                    <Border BorderBrush="#7FFFFFFF" BorderThickness="0,0,0,1" CornerRadius="1,1,0,0"/>
                                </Border>
                                <Border x:Name="headlight" CornerRadius="1,1,0,0" Background="#66FFFFFF"/>
                            </Grid>
                            <Image
                                    Visibility="{TemplateBinding ShowIconOnTitleBar, Converter={StaticResource BooleanToVisibilityConverter}}"
                                    Source="{TemplateBinding Icon}"/>
                            <TextBlock
                                    x:Name="WindowTitleTextBlock"
                                    Grid.Column="1"
                                    Text="{TemplateBinding Title}"
                                    HorizontalAlignment="Left" 
                                    TextTrimming="CharacterEllipsis"
                                    VerticalAlignment="Center" 
                                    Margin="8 -1 0 0" 
                                    FontSize="16" 
                                    FontFamily="{DynamicResource HeaderFontFamily}"
                                    Foreground="{TemplateBinding TitleForeground}"/>
                        </Grid>
                        <ContentPresenter 
                                Content="{Binding WindowCommands, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NebulaWindow}}}" 
                                x:Name="PART_WindowCommands"
                                Panel.ZIndex="1"
                                Grid.RowSpan="2"
								VerticalAlignment="Top"
                                HorizontalAlignment="Right"
								Height="{Binding TitlebarHeight, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NebulaWindow}}}" />
                        <ContentPresenter Grid.Row="1"/>
                    </Grid>
                </local:MetroContentControl>
            </AdornerDecorator>
            <!--<Border x:Name="PART_Border"  BorderThickness="{TemplateBinding BorderThickness}"
                    HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                    CornerRadius="3" BorderBrush="{DynamicResource winbordercolor}" Background="{DynamicResource winbgcolor}"/>-->
            <ResizeGrip x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
            <ItemsControl ItemsSource="{Binding Flyouts, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NebulaWindow}}}" VerticalAlignment="Stretch">
                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <Grid  />
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
            </ItemsControl>
        </Grid>
        <ControlTemplate.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                    <Condition Property="WindowState" Value="Normal"/>
                </MultiTrigger.Conditions>
                <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
            </MultiTrigger>
            <Trigger Property="TitleCaps" Value="True">
                <Setter TargetName="WindowTitleTextBlock" Property="Text" Value="{Binding Path=Title,RelativeSource={RelativeSource TemplatedParent}}" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type local:NebulaWindow}">
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="Black"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="#FFC5D6EA"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Behaviours:StylizedBehaviors.Behaviors">
            <Setter.Value>
                <Behaviours:StylizedBehaviorCollection>
                    <Behaviours:BorderlessWindowBehavior/>
                    <Behaviours:WindowsSettingBehaviour/>
                </Behaviours:StylizedBehaviorCollection>
            </Setter.Value>
        </Setter>
        <Setter Property="TitleForeground" Value="Black" />
        <Setter Property="Template" Value="{StaticResource WindowTemplateKey}"/>
    </Style>

    <!--WindowCommands-->
    <Style x:Key="IronicallyNamedChromelessButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="#00FFFFFF" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid x:Name="grid" Background="{TemplateBinding Background}">
                        <ContentPresenter x:Name="contentPresenter"
                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          Margin="{TemplateBinding Padding}"
                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          RecognizesAccessKey="True"
                                          Opacity="0.75" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
                            <Setter TargetName="grid" Property="Background" Value="#55FFFFFF" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="False">
                            <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="grid" Property="Background" Value="#FF086F9E" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="#ADADAD" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type local:WindowCommands}">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:WindowCommands">
                    <ControlTemplate.Resources>
                        <ResourceDictionary>
                            <Style TargetType="{x:Type Button}">
                                <Setter Property="Background" Value="#02FFFFFF" />
                                <Setter Property="HorizontalContentAlignment" Value="Center" />
                                <Setter Property="VerticalContentAlignment" Value="Center" />
                                <Setter Property="Padding" Value="1" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type Button}">
                                            <Grid Background="{TemplateBinding Background}">
                                                <ContentPresenter x:Name="contentPresenter"
                                                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                            RecognizesAccessKey="True"
                                                            Opacity="0.75" Margin="11,1,11,1" />

                                                <Rectangle x:Name="border" 
                                                               SnapsToDevicePixels="True"
                                                               IsHitTestVisible="False" 
                                                               Opacity="0.25"
                                                               Width="0" Height="15" VerticalAlignment="Stretch" HorizontalAlignment="Right" 
                                                               Fill="{TemplateBinding Foreground}" Margin="10,0,0,0" />
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter TargetName="contentPresenter" Property="Opacity" Value="1" />
                                                </Trigger>
                                                <Trigger Property="IsMouseOver" Value="False">
                                                    <Setter TargetName="contentPresenter" Property="Opacity" Value=".5" />
                                                </Trigger>
                                                <Trigger Property="IsKeyboardFocused" Value="true" />
                                                <Trigger Property="ToggleButton.IsChecked" Value="true" />
                                                <Trigger Property="IsEnabled" Value="false">
                                                    <Setter Property="Foreground" Value="#ADADAD" />
                                                </Trigger>
                                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource PreviousData}}" Value="{x:Null}">
                                                    <Setter TargetName="border" Property="Rectangle.Width" Value="1"/>
                                                </DataTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding ShowTitleBar, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NebulaWindow}}}" Value="True">
                                        <Setter Property="Foreground" Value="White" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ResourceDictionary>
                    </ControlTemplate.Resources>

                    <StackPanel Orientation="Horizontal" VerticalAlignment="Top" >
                        <ItemsControl IsTabStop="False" ItemsSource="{Binding Items, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:WindowCommands}}}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal" />
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                        <Button x:Name="PART_Min"
                            Width="34"
                            Height="{Binding TitlebarHeight, RelativeSource={RelativeSource AncestorType=local:NebulaWindow}}"
                            MaxHeight="34"    
                            Style="{DynamicResource IronicallyNamedChromelessButtonStyle}"
                            Padding="0"
                            ToolTip="{Binding Minimize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:WindowCommands}}}"
                            Visibility="{Binding ShowMinButton, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NebulaWindow}}, Converter={StaticResource BooleanToVisibilityConverter}}">
                            <Path Data="F1M0,6L0,9 9,9 9,6 0,6z" SnapsToDevicePixels="True"  Fill="{TemplateBinding Foreground}"/>
                        </Button>

                        <Button x:Name="PART_Max"
                            Width="34"
                            Height="{Binding TitlebarHeight, RelativeSource={RelativeSource AncestorType=local:NebulaWindow}}"
                            MaxHeight="34"
                            Style="{DynamicResource IronicallyNamedChromelessButtonStyle}"
                            Padding="0"
                            Foreground="{TemplateBinding Foreground}"
                            Visibility="{Binding ShowMaxRestoreButton, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NebulaWindow}}, Converter={StaticResource BooleanToVisibilityConverter}}"
                            ToolTip="{Binding Maximize, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:WindowCommands}}}">
                            <Grid>
                                <Path x:Name="MaximisePath" SnapsToDevicePixels="True" Data="F1M0,0L0,9 9,9 9,0 0,0 0,3 8,3 8,8 1,8 1,3z" Fill="{TemplateBinding Foreground}"/>
                                <Path x:Name="RestorePath" SnapsToDevicePixels="True" Data="F1M0,10L0,3 3,3 3,0 10,0 10,2 4,2 4,3 7,3 7,6 6,6 6,5 1,5 1,10z M1,10L7,10 7,7 10,7 10,2 9,2 9,6 6,6 6,9 1,9z"  Fill="{TemplateBinding Foreground}"/>
                            </Grid>
                        </Button>

                        <Button x:Name="PART_Close"
                            Width="34"
                            Height="{Binding TitlebarHeight, RelativeSource={RelativeSource AncestorType=local:NebulaWindow}}"
                            MaxHeight="34"
                            Style="{DynamicResource IronicallyNamedChromelessButtonStyle}"
                            ToolTip="{Binding Close, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:WindowCommands}}}"
                            Visibility="{Binding ShowCloseButton, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NebulaWindow}}, Converter={StaticResource BooleanToVisibilityConverter}}"
                            Foreground="{TemplateBinding Foreground}">
                            <Path Data="F1M0,0L2,0 5,3 8,0 10,0 6,4 10,8 8,8 5,5 2,8 0,8 4,4 0,0z"  SnapsToDevicePixels="True"  Fill="{TemplateBinding Foreground}"/>
                        </Button>
                    </StackPanel>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ShowTitleBar, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:NebulaWindow}}}" Value="True">
                <Setter Property="Foreground" Value="Black" />
            </DataTrigger>
        </Style.Triggers>
    </Style>


</ResourceDictionary>
